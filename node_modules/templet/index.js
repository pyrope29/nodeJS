
;(function() {

  'use strict';

  var util = require('util');
  var Emitter = require('events').EventEmitter;

  function Element(name, attrs, text) {
    this._name = name;
    this._attrs = attrs || '';
    this._text = text || '';
    this._children = [];
    this._lastModified = Date.now();
    this.on('change', this.clock.bind(this));
  };

  util.inherits(Element, Emitter);

  Element.prototype.clock = function() {
    this._lastModified = Date.now();
  };

  Element.prototype.open = function() {
    return ['<', this._name, this._attrs, '>'].join('');
  };

  Element.prototype.close = function() {
    return ['</', this._name, '>'].join('');
  };

  Element.prototype.attr = function(attr, val) {
    this._attrs += ' ' + attr + '="' + val + '"';
    this.emit('change', 'add attribute');
    return this;
  };

  Element.prototype.id = function(id) {
    this.attr('id', id);
    return this;
  };

  Element.prototype.addClass = 
  Element.prototype.class = function(className) {
    this.attr('class', className);
    return this;
  };

  Element.prototype.appendText = 
  Element.prototype.text = function(_text) {
    this._text += _text;
    this.emit('change', 'append text');
    return this;
  };

  Element.prototype.appendChild = function() {
    var append = function(el) {
      this._text += el.getHTML();
      this._children.push(el);
      var change = this.emit.bind(this, 'change');
      el.on('change', change);
      change('append child');
    }.bind(this);
    var els = Array.prototype.slice.call(arguments);
    els.forEach(append);
    return this;
  };

  Element.prototype.appendTo = function(el) {
    el.appendChild(this); 
    return el;
  };

  Element.prototype.insert = function() {
    var res = [this.open(), this._text];
    function map(el) {
      if (el.constructor === Element) {
        return el.val(); 
      } else {
        return el;
      };
    };
    var els = Array.prototype.slice.call(arguments).map(map);
    return res.concat(els, this.close()).join('');
  };

  Element.prototype.get = function(attr) {
    return this['_' + attr];
  };

  Element.prototype.clone = function() {
    return new this.constructor(this._name, this._attrs, this._text);
  };

  Element.prototype.getHTML = 
  Element.prototype.val = function() {
    return [this.open(), this._text, this.close()].join('');
  };

  Element.prototype.toString = Element.prototype.getHTML;

  exports.Element = Element;

  exports.createElement = function(tagName) {
    return new Element(tagName.replace(/<|>/g, ''));
  };

  function Document(options) {
    this.doctype = exports.createElement('!doctype html');
    this.html  = exports.createElement('html');
    this.head  = exports.createElement('head');
    this.meta  = exports.createElement('meta');
    this.title = exports.createElement('title');
    this.body  = exports.createElement('body');
    this.head.text(this.meta.attr('charset', 'utf-8').open());

    this._lastModified = Date.now();
    this._lastRendered = Date.now();
    this._rendered = this.render();

    var clock = this.clock.bind(this);
    var change = this.emit.bind(this, 'change');

    this.on('change', clock);
    this.html.on('change', change);
    this.head.on('change', change);
    this.body.on('change', change);
  };

  util.inherits(Document, Emitter);

  Document.prototype.createElement = exports.createElement;

  Document.prototype.clock = function() {
    this._lastModified = Date.now();
  };

  Document.prototype.render = function() {
    if (this._lastModified < this._lastRendered) {
      this.lastRendered = Date.now();
      return this._rendered;
    } else {
      var head = this.head.insert(this.title);
      var body = this.body.val();
      var html = this.html.insert(head, body);
      var res = this.doctype.open() + html;
      this._rendered = res;
      this._lastRendered = Date.now();
      return res;
    };
  };

  Document.prototype.addEventListener = function(ev, fn) {
    var script = this.createElement('script');
    var cbName = 'cb_' + Math.random().toString(36).substring(2);
    var _script = 'var ' + cbName + ' = ' + fn.toString() + ';'
    + 'document.addEventListener("' + ev + '", ' + cbName + ');'
    script.appendText(_script);
    this.body.appendChild(script);
  };

  Document.prototype.ajax = function(options, cb) {
    var url = options.url;
    var method = options.method || 'GET';
    var json = !!options.json;
    var fn = cb || options.complete || function(){};

    var req = {};
    function callback() {
      if (req.readyState === 4) {
        if (req.status === 200) {
          var text = req.responseText;
          complete(json ? JSON.parse(text) : text);
        } else {
        };
      } else {
      };
    };

    var script = this.createElement('script');
    var _script = 'var json = ' + json + ';'
    + 'var complete = ' + fn.toString() + ';'
    + 'var req = new XMLHttpRequest();'
    + 'req.onreadystatechange = ' + callback.toString() + ';'
    + 'req.open("' + method + '", "' + url + '", true);'
    + 'req.send(null);';

    script.appendText(_script);
    this.body.appendChild(script);
  };

  exports.Document = Document;

  exports.createDocument = function(options) {
    return new Document(options);
  };

  exports.TEMPLATES = new(function() {

    this.BASE = (function generateBase() {
      var doctype = '<!doctype html>\n';
      var html  = exports.createElement('html');
      var head  = exports.createElement('head');
      var title = exports.createElement('title');
      var meta  = exports.createElement('meta');
      var body  = exports.createElement('body');

      head.appendChild(title.text('{{title}}'));
      head.text(meta.attr('charset', 'utf-8').open());
      body.text('{{body}}');
      html.appendChild(head, body);

      return doctype + html.getHTML();
    })();

  });

  exports.addTemplate = function(name, value) {
    exports.TEMPLATES[name] = value;
  };

  function Templet(options) {
    options = options || {};
    this._open = options.open || '{{';
    this._close = options.close || '}}';
  };

  Templet.prototype.set = function(type, val) {
    this['_' + type] = val;
  };

  Templet.prototype.open = function(val) {
    this.set('open', val);
  };

  Templet.prototype.close = function(val) {
    this.set('close', val);
  };

  Templet.prototype.render = function(tmpl, args, fn) {
    var res = tmpl || '';
    for (var key in args) {
      var re = new RegExp(this._open + key + this._close, 'g');
      res = res.replace(re, args[key]);
    };
    return fn ? fn(res) : res;
  };

  Templet.prototype.createElement = exports.createElement;

  exports.Templet = Templet;

  exports.createTemplet = function(options) {
    return new Templet(options);
  };

  ;(function extendHttpResponse() {
    var http = require('http');
    var _templet = new Templet();
    var _render = _templet.render;
    http.ServerResponse.prototype.render = function() {
      this.writeHead(200, { 'Content-Type':'text/html' });
      this.end(_render.apply(_templet, arguments));
    };
  })();

})();
